# conda activate allpy310
# pip install pymongo

# Подключаемся к MongoDB через pymongo и выполняем первую операцию
from pymongo import MongoClient

# Подключаемся к серверу MongoDB (по умолчанию это localhost:27017)
client = MongoClient('mongodb://localhost:27017/')

# Создаем или подключаемся к существующей базе данных
db = client.my_database

# Создаем или подключаемся к коллекции
collection = db.my_collection

# Добавляем документ в коллекцию
data = {"name": "Alice", "age": 30, "email": "alice@example.com"}
collection.insert_one(data)

print("Document inserted!")

# --------------------------------------------------------------
# Операции с документами: добавить, прочитать, обновить, удалить

# 1.Добавление нескольких документов
# Допустим, у вас есть данные для нескольких пользователей. Их можно вставить за один раз
users = [
    {"name": "Bob", "age": 25},
    {"name": "Charlie", "age": 35, "email": "charlie@example.com"}
]
collection.insert_many(users)

# 2. Чтение данных
# Извлечь данные можно разными способами. Например, получить всё содержимое коллекции:
for user in collection.find():
    print(user)

# Или что-то выборочное:
result = collection.find_one({"name": "Alice"})
print(result)

# 3. Обновление документа
# Обновим email для пользователя Alice:
collection.update_one(
    {"name": "Alice"},
    {"$set": {"email": "new_alice@example.com"}}
)
# Обратите внимание на $set — это специальный оператор MongoDB для обновления только указанных полей.

# 4. Удаление документов
# Удалить можно один документ или все, подходящие под условие:
# Удаляем одного пользователя по имени
collection.delete_one({"name": "Alice"})

# Удаляем всех, кто младше 30
collection.delete_many({"age": {"$lt": 30}})

'''
Плюсы MongoDB:
- Гибкость структуры: забудьте про жесткую схему таблиц. Каждый документ может быть уникальным.
- Масштабируемость: MongoDB легко обрабатывает большие объемы данных и горизонтально масштабируется.
- Работа с JSON: если вы привыкли к обмену данными через JSON, работать будет особенно приятно.
- Высокая производительность: благодаря индексам и механизму хранения BSON данные читаются и пишутся очень быстро.
- Гибкость, легкость использования и быстрая настройка делают эту базу особенно привлекательной для начинающих и опытных разработчиков
'''



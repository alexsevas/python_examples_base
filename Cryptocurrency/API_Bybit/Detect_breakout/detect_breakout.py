# conda activate allpy310

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:
# –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ BTCUSDT,
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è,
# –í—ã–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å

import requests
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SYMBOL = "BTCUSDT"
KLINE_URL = "https://api.bybit.com/v5/market/kline"
INTERVAL = "15"  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
LIMIT = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
TOLERANCE = 0.002  # –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑—Ä—ã–≤ (0.2%)

def get_kline_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏"""
    params = {"category": "spot", "symbol": SYMBOL, "interval": INTERVAL, "limit": LIMIT}
    response = requests.get(KLINE_URL, params=params)

    if response.status_code == 200:
        return response.json().get("result", {}).get("list", [])
    else:
        print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
        return None

def find_support_resistance(candles):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    closes = np.array([float(c[4]) for c in candles])
    highs = np.array([float(c[2]) for c in candles])
    lows = np.array([float(c[3]) for c in candles])

    support = np.min(lows)
    resistance = np.max(highs)

    return support, resistance

def detect_breakout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω–µ–π"""
    candles = get_kline_data()
    if not candles:
        return

    support, resistance = find_support_resistance(candles)
    last_close = float(candles[-1][4])

    if last_close >= resistance * (1 + TOLERANCE):
        print(f"üöÄ –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö! –¶–µ–Ω–∞ {last_close:.2f} –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è {resistance:.2f}")
    elif last_close <= support * (1 - TOLERANCE):
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑! –¶–µ–Ω–∞ {last_close:.2f} –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {support:.2f}")
    else:
        print(f"üìä –¶–µ–Ω–∞ {last_close:.2f}, –¥–∏–∞–ø–∞–∑–æ–Ω: {support:.2f} - {resistance:.2f} (–±–µ–∑ –ø—Ä–æ–±–æ—è)")

if __name__ == "__main__":
    detect_breakout()

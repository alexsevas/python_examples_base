# conda activate allpy310

# –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–¥–µ—Ç–µ–∫—Ç–æ—Ä "—Å—Ç–µ–Ω–æ–∫")
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª—É–±–∏–Ω—É —Å—Ç–∞–∫–∞–Ω–∞ –∏ –∏—â–µ—Ç –Ω–µ–æ–±—ã—á–Ω–æ –∫—Ä—É–ø–Ω—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ("—Å—Ç–µ–Ω—ã"), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞
# –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã,–∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω–æ–µ API Bybit

import requests
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ORDERBOOK_URL = "https://api.bybit.com/v5/market/orderbook"
SYMBOL = "BTCUSDT"
CATEGORY = "spot"
DEPTH_LEVELS = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
VOLUME_THRESHOLD_RATIO = 0.1  # –ü–æ—Ä–æ–≥ "—Å—Ç–µ–Ω" (10% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞ —Å—Ç–∞–∫–∞–Ω–∞)
REFRESH_INTERVAL = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

def get_orderbook():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫"""
    params = {"category": CATEGORY, "symbol": SYMBOL}
    response = requests.get(ORDERBOOK_URL, params=params)
    if response.status_code == 200:
        result = response.json().get("result", {})
        return result.get("b", []), result.get("a", [])
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ API Orderbook: {response.status_code}, {response.text}")

def detect_liquidity_walls():
    """–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ {SYMBOL}...\n")
        while True:
            bids, asks = get_orderbook()

            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-N —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞–∫–∞–Ω–∞
            bids = [(float(price), float(size)) for price, size in bids[:DEPTH_LEVELS]]
            asks = [(float(price), float(size)) for price, size in asks[:DEPTH_LEVELS]]

            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞–∫–∞–Ω–µ
            total_bid_volume = sum(size for _, size in bids)
            total_ask_volume = sum(size for _, size in asks)

            # –ü–æ—Ä–æ–≥ –¥–ª—è "—Å—Ç–µ–Ω" –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (10% –æ—Ç –≤—Å–µ–≥–æ –æ–±—ä—ë–º–∞ —Å—Ç–∞–∫–∞–Ω–∞)
            bid_threshold = total_bid_volume * VOLUME_THRESHOLD_RATIO
            ask_threshold = total_ask_volume * VOLUME_THRESHOLD_RATIO

            # –ò—â–µ–º "—Å—Ç–µ–Ω—ã" ‚Äì –∑–∞—è–≤–∫–∏, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ø–æ—Ä–æ–≥
            big_bids = [(price, size) for price, size in bids if size >= bid_threshold]
            big_asks = [(price, size) for price, size in asks if size >= ask_threshold]

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if big_bids:
                print(f"üü¢ –ö—Ä—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É:")
                for price, size in big_bids:
                    print(f"   –¶–µ–Ω–∞: {price:.2f}, –û–±—ä—ë–º: {size:.2f}")

            if big_asks:
                print(f"üî¥ –ö—Ä—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:")
                for price, size in big_asks:
                    print(f"   –¶–µ–Ω–∞: {price:.2f}, –û–±—ä—ë–º: {size:.2f}")

            print("-" * 40)
            time.sleep(REFRESH_INTERVAL)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    detect_liquidity_walls()

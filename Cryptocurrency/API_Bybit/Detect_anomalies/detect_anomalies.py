# conda activate allpy310

'''
A–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π —Å –ø–æ–º–æ—â—å—é Z-Score.
- –§–∏–ª—å—Ç—Ä—É–µ—Ç —à—É–º ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
- –í—ã—è–≤–ª—è–µ—Ç —Å–∏–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
- –ü—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ ‚Äî –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API Bybit
'''

import requests
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SYMBOL = "BTCUSDT"
KLINE_URL = "https://api.bybit.com/v5/market/kline"
INTERVAL = "15"  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
LIMIT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

def get_kline_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏"""
    params = {"category": "spot", "symbol": SYMBOL, "interval": INTERVAL, "limit": LIMIT}
    response = requests.get(KLINE_URL, params=params)

    if response.status_code == 200:
        return response.json().get("result", {}).get("list", [])
    else:
        print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
        return None

def detect_anomalies():
    """–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π"""
    candles = get_kline_data()
    if not candles:
        return

    closes = np.array([float(c[4]) for c in candles])
    returns = np.diff(closes)  # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏

    mean = np.mean(returns)
    std = np.std(returns)
    z_scores = (returns - mean) / std  # Z-–æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    threshold = 3  # –ì—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–æ–º–∞–ª–∏–π
    anomalies = np.where(abs(z_scores) > threshold)[0]

    for idx in anomalies:
        move = "üöÄ –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç" if z_scores[idx] > 0 else "‚ö†Ô∏è –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ"
        print(f"{move}: –°–≤–µ—á–∞ {idx+1}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {returns[idx]:.2f}, Z-Score: {z_scores[idx]:.2f}")

if __name__ == "__main__":
    detect_anomalies()
